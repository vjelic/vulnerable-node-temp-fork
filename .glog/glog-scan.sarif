{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-2164424f-45e5-47ea-8420-3aa6ad2d469f",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"URI Contains Username and Password Vulnerability\" is a security issue where sensitive information such as usernames and passwords are included in the URI. This is a problem because URIs are often logged in various places such as browser history, web server logs, and network infrastructure logs. This could potentially expose sensitive information to unauthorized individuals.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, sensitive information should never be included in the URI. Instead, secure methods of transmitting this information should be used. For example, using secure HTTP headers or form parameters to transmit the username and password.\n\n## Source Code Fix Recommendation\n\nInstead of including the username and password in the URI, you can use the `pg` library's `Client` class to connect to the PostgreSQL server. Here's an example:\n\n```javascript\nconst { Client } = require('pg')\n\nconst client = new Client({\n  user: 'postgres',\n  host: '127.0.0.1',\n  password: 'postgres',\n  database: 'my_database',\n})\n\nclient.connect()\n```\n\n## Library Dependencies\n\nThe above code example requires the `pg` library to execute properly.\n\n```bash\nnpm install pg\n```\n\n## References\n\n- [OWASP Top 10-2017 A3-Sensitive Data Exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n- [CWE-598: Information Exposure Through Query Strings in GET Request](https://cwe.mitre.org/data/definitions/598.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-username-and-password-in-uri"
                ]
              }
            },
            {
              "id": "glog-411b7f01-ebcd-4229-bd25-10f4508d78eb",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"URI Contains Username and Password Detection\" is a vulnerability that occurs when a Uniform Resource Identifier (URI) contains sensitive information such as a username and password. This is a security risk as it exposes these credentials in plain text, making them easily accessible to attackers. In JavaScript, this vulnerability can occur when using connection strings for databases or other services that include the username and password in the URI.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, sensitive information such as usernames and passwords should not be included in the URI. Instead, these credentials should be stored securely and retrieved as needed. This can be done using environment variables or secure configuration files. \n\n## Source Code Fix Recommendation\n\nInstead of including the username and password in the URI, you can use environment variables to store these credentials. Here is an example of how you can do this:\n\n```javascript\nconst { Pool } = require('pg');\n\nconst pool = new Pool({\n  host: '10.211.55.70',\n  user: process.env.PGUSER,\n  password: process.env.PGPASSWORD,\n  database: 'postgres'\n});\n```\n\nIn this example, the `PGUSER` and `PGPASSWORD` environment variables are used to store the username and password. These can be set in your environment or in a `.env` file.\n\n## Library Dependencies\n\nThe code example requires the `pg` library to connect to a PostgreSQL database.\n\n## References\n\n- [OWASP Top 10 2017 Category A2: Broken Authentication](https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication)\n- [CWE-259: Use of Hard-coded Password](https://cwe.mitre.org/data/definitions/259.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "resources.rules.detected-username-and-password-in-uri"
                ]
              }
            },
            {
              "id": "glog-ce23c931-ce6f-4c93-8834-01ea757d9f3c",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks. An attacker could potentially predict the output of `Math.random()` and use this information to compromise the security of the application.\n\nThe `Crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function uses a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a function that generates cryptographically secure random numbers. In Node.js, you can use the `crypto.randomBytes()` function. This function generates a buffer of cryptographically secure random bytes, which you can then convert to a number.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet price = parseInt(crypto.randomBytes(4).readUInt32BE(0) % 100);\n```\n\nThis code generates a buffer of 4 random bytes, converts it to a 32-bit unsigned integer, and then takes the remainder when divided by 100 to get a random number between 0 and 99.\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [OWASP: Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-ca517f37-3624-4330-bd06-ebcd79f5bf86",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks. An attacker could potentially predict the output of `Math.random()` and use this information to compromise the security of the application.\n\nThe `Crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function uses a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a function that generates cryptographically secure random numbers. In Node.js, you can use the `crypto.randomBytes()` function. This function generates a buffer of cryptographically secure random bytes, which you can then convert to a number.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet price = parseInt(crypto.randomBytes(4).readUInt32BE(0) % 100);\n```\n\nThis code generates a buffer of 4 random bytes, converts it to a 32-bit unsigned integer, and then takes the remainder when divided by 100 to get a random number between 0 and 99.\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [OWASP: Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-c8a312c9-7118-466f-bc37-df1da0a8fafa",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks. An attacker could potentially predict the output of `Math.random()` and use this information to compromise the security of the application.\n\nThe `Crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function uses a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a function that generates cryptographically secure random numbers. In Node.js, you can use the `crypto.randomBytes()` function. This function generates a buffer of cryptographically secure random bytes, which you can then convert to a number.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet price = parseInt(crypto.randomBytes(4).readUInt32BE(0) % 100);\n```\n\nThis code generates a buffer of 4 random bytes, converts it to a 32-bit unsigned integer, and then takes the remainder when divided by 100 to get a random number between 0 and 99.\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [OWASP: Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-7509b61e-7e8d-4602-beed-9830f416cb56",
              "help": {
                "text": "",
                "markdown": "## Description\n\nPotential Root User Exploitation in Docker Container is a security vulnerability that occurs when a Docker container is run as a root user. This can lead to serious security issues as the root user has full permissions and can execute any command, potentially leading to unauthorized access or data loss.\n\nIn the context of JavaScript and Node.js applications, this vulnerability can be exploited if the Docker container running the Node.js application is run as a root user. The specific vulnerability sink in this case is the `CMD [ \"npm\", \"start\" ]` command in the Dockerfile, which starts the Node.js application.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always run Docker containers as a non-root user. This can be achieved by creating a new user in the Dockerfile and switching to this user before executing any commands.\n\n## Source Code Fix Recommendation\n\nHere is a recommended fix for the Dockerfile:\n\n```Dockerfile\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN adduser -D myuser\nUSER myuser\nCMD [ \"npm\", \"start\" ]\n```\n\nIn this Dockerfile, a new user `myuser` is created and the `USER` instruction is used to switch to this user before the `CMD [ \"npm\", \"start\" ]` command is executed.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- Node.js\n- npm\n\n## References\n\n- [CWE-250: Execution with Unnecessary Privileges](https://cwe.mitre.org/data/definitions/250.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "dockerfile.security.missing-user.missing-user"
                ]
              }
            },
            {
              "id": "glog-3a20b902-aac0-4e59-92fb-df2d3b70f7a3",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks. An attacker could potentially predict the output of `Math.random()` and use this information to compromise the security of the application.\n\nThe `Crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function uses a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a function that generates cryptographically secure random numbers. In Node.js, you can use the `crypto.randomBytes()` function. This function generates a buffer of cryptographically secure random bytes, which you can then convert to a number.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet price = parseInt(crypto.randomBytes(4).readUInt32BE(0) % 100);\n```\n\nThis code generates a buffer of 4 random bytes, converts it to a 32-bit unsigned integer, and then takes the remainder when divided by 100 to get a random number between 0 and 99.\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [OWASP: Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-c8070724-a714-40f4-912c-24fcd4afc026",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks. An attacker could potentially predict the output of `Math.random()` and use this information to compromise the security of the application.\n\nThe `Crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function uses a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a function that generates cryptographically secure random numbers. In Node.js, you can use the `crypto.randomBytes()` function. This function generates a buffer of cryptographically secure random bytes, which you can then convert to a number.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet price = parseInt(crypto.randomBytes(4).readUInt32BE(0) % 100);\n```\n\nThis code generates a buffer of 4 random bytes, converts it to a 32-bit unsigned integer, and then takes the remainder when divided by 100 to get a random number between 0 and 99.\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [OWASP: Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-0fd572c5-7666-4fc2-8a23-ce72c8a462b9",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `Math.random()` function in JavaScript is not suitable for generating cryptographically secure random numbers. This is because it is a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks. An attacker could potentially predict the output of `Math.random()` and use this information to compromise the security of the application.\n\nThe `Crypto.pseudoRandomBytes()` function in Node.js is also not suitable for generating cryptographically secure random numbers. This function uses a pseudorandom number generator that is not designed to be unpredictable and can be vulnerable to attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should use a function that generates cryptographically secure random numbers. In Node.js, you can use the `crypto.randomBytes()` function. This function generates a buffer of cryptographically secure random bytes, which you can then convert to a number.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the code:\n\n```javascript\nconst crypto = require('crypto');\n\nlet price = parseInt(crypto.randomBytes(4).readUInt32BE(0) % 100);\n```\n\nThis code generates a buffer of 4 random bytes, converts it to a 32-bit unsigned integer, and then takes the remainder when divided by 100 to get a random number between 0 and 99.\n\n## Library Dependencies\n\nThe code example requires the `crypto` module, which is a built-in module in Node.js.\n\n## References\n\n- [OWASP: Insecure Randomness](https://owasp.org/www-community/vulnerabilities/Insecure_Randomness)\n- [CWE-330: Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.node_insecure_random_generator"
                ]
              }
            },
            {
              "id": "glog-ba74872a-ce0c-4fee-a566-78cb2b064178",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when data enters a program from an untrusted source and is used to generate dynamic HTML content. An attacker can inject malicious scripts into the HTML content, which will be executed by the victim's browser. In this case, the vulnerability arises from user-controlled data in an HTML string.\n\nThe provided code snippet is vulnerable to SQL Injection, not XSS. The `query` variable is directly concatenated into the SQL query string without any sanitization or parameterization, which allows an attacker to manipulate the SQL query.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should never build SQL queries by concatenating user-controlled data. Instead, use parameterized queries or prepared statements, which can ensure that user input is always treated as literal data, not part of the SQL command.\n\n## Source Code Fix Recommendation\n\nHere is a fix using parameterized queries with PostgreSQL's `pg-promise` library:\n\n```javascript\nconst pgp = require('pg-promise')();\n\n// ... setup your database connection ...\n\nconst query = 'user input';\nconst sql = \"SELECT * FROM products WHERE name ILIKE $1 OR description ILIKE $1;\";\ndb.any(sql, [`%${query}%`])\n    .then(data => {\n        console.log(data); // print data;\n    })\n    .catch(error => {\n        console.log(error); // print the error;\n    });\n```\n\n## Library Dependencies\n\nThe code example requires the `pg-promise` library to execute properly.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-f541fd6d-ce11-462a-9577-8e96e16de9aa",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nThe provided code snippet is vulnerable to XSS because it directly uses user-controlled data (`username` and `password`) in an SQL query string without any sanitization or escaping. This could allow an attacker to inject malicious SQL commands.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should:\n\n1. Use Prepared Statements (Parameterized Queries) or Stored Procedures to ensure that user input cannot interfere with the query structure.\n2. Use a safe API which provides a parameterized interface.\n3. Escape special characters using the specific escape syntax for that interpreter.\n4. Apply the principle of least privilege to your database accounts.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using parameterized queries:\n\n```javascript\nvar sql = \"SELECT * FROM users WHERE name = ? AND password = ?\";\ndb.query(sql, [username, password], function(err, results) {\n   // ...\n});\n```\n\n## Library Dependencies\n\nThe code example requires a database driver to execute SQL queries. The specific library will depend on the database system you are using. For example, if you are using MySQL in Node.js, you might use the `mysql` library.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n\n## CWE\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-314ac349-df3c-4a0f-93e3-8ce90f7e8917",
              "help": {
                "text": "",
                "markdown": "## Description\n\nCross-Site Scripting (XSS) vulnerabilities occur when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code, the vulnerability arises from the concatenation of user-controlled data (`cart.*`) directly into a SQL query string. This not only opens up the possibility for XSS attacks, but also SQL Injection attacks.\n\n## Mitigation Advice\n\nTo mitigate XSS vulnerabilities, it is recommended to:\n\n1. Use frameworks that automatically escape XSS by design, such as Ruby on Rails, React JS, etc.\n2. Escape untrusted HTTP request data based on the context in the HTML output (body, attribute, JavaScript, CSS, or URL) will resolve Reflected and Stored XSS vulnerabilities.\n3. Apply context-sensitive encoding when modifying the browser document on the client side acts against DOM XSS.\n\nFor SQL Injection, it is recommended to:\n\n1. Use parameterized queries or prepared statements instead of building SQL queries manually.\n2. Apply least privilege principle to the database accounts used by the application.\n3. Regularly update and patch all systems to ensure security fixes are applied.\n\n## Source Code Fix\n\nThe provided code can be fixed by using parameterized queries:\n\n```javascript\nvar sql = \"INSERT INTO purchases(mail, product_name, user_name, product_id, address, phone, ship_date, price) VALUES(?, ?, ?, ?, ?, ?, ?, ?)\";\nvar values = [cart.mail, cart.product_name, cart.username, cart.product_id, cart.address, cart.phone, cart.ship_date, cart.price];\nconnection.query(sql, values, function (err, result) {\n    if (err) throw err;\n    console.log(\"Record inserted\");\n});\n```\n\n## Library Dependencies\n\nThe provided code does not specify any library dependencies. However, to execute SQL queries, a library such as `mysql` for Node.js would be required.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-0fdb00f5-8e52-456e-92e4-4cdddf9e8223",
              "help": {
                "text": "",
                "markdown": "## Description\n\nA potential Cross-Site Scripting (XSS) vulnerability from user-controlled data in HTML string exists when an application includes untrusted data in a new HTML string used to generate a page. An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should:\n\n1. Never Insert Untrusted Data Except in Allowed Locations.\n2. HTML Escape Before Inserting Untrusted Data into HTML Element Content.\n3. Attribute Escape Before Inserting Untrusted Data into HTML Common Attributes.\n4. JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values.\n5. Limit the use of user-supplied input in your application's code.\n\n## Source Code Fix Recommendation\n\nThe provided code snippet is vulnerable to SQL Injection, not XSS. However, to fix the SQL Injection vulnerability, you should use parameterized queries or prepared statements. Here is an example using Node.js and MySQL:\n\n```javascript\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host     : 'localhost',\n  user     : 'me',\n  password : 'secret',\n  database : 'my_db'\n});\n\nconnection.connect();\n\nlet product_id = 'USER_INPUT';\nvar sql = 'SELECT * FROM products WHERE id = ?';\nconnection.query(sql, [product_id], function (error, results, fields) {\n  if (error) throw error;\n  console.log(results);\n});\n\nconnection.end();\n```\n\n## Library Dependencies\n\nThe code example requires the `mysql` library.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-dc8d4109-6e4a-4b90-bef3-be06984146a4",
              "help": {
                "text": "",
                "markdown": "The `MAINTAINER` instruction was deprecated in Docker as of Docker 1.13.0. This instruction was used in Dockerfiles to specify the Author of the Dockerfile. The `MAINTAINER` instruction is not a JavaScript vulnerability, but rather a Dockerfile best practice. \n\nThe `MAINTAINER` instruction has been replaced with the `LABEL` instruction, which is more flexible and can be used to specify various metadata including the author of the Dockerfile.\n\n## Mitigation Advice\n\nTo mitigate this, replace the `MAINTAINER` instruction with the `LABEL` instruction in your Dockerfile. \n\n## Source Code Fix Recommendation\n\nReplace:\n\n```Dockerfile\nMAINTAINER \"Daniel Garcia aka (cr0hn)\" <cr0hn@cr0hn.com>\n```\n\nWith:\n\n```Dockerfile\nLABEL maintainer=\"Daniel Garcia aka (cr0hn) <cr0hn@cr0hn.com>\"\n```\n\n## Library Dependencies\n\nThis Dockerfile instruction does not require any library dependencies.\n\n## OWASP and CWE Resources\n\n- [OWASP Docker Security](https://owasp.org/www-project-docker-top-10/)\n- [CWE-200: Information Exposure](https://cwe.mitre.org/data/definitions/200.html)\n\nPlease note that these links are subject to change and may not be available in the future."
              },
              "properties": {
                "tags": [
                  "resources.rules.maintainer-is-deprecated"
                ]
              }
            },
            {
              "id": "glog-5de1a0e0-fbad-4966-8b0e-31cd9e7f7819",
              "help": {
                "text": "",
                "markdown": "## Description\n\nA potential Cross-Site Scripting (XSS) vulnerability from user-controlled data in HTML string exists when an application includes untrusted data in a new HTML string used to generate a page. XSS vulnerabilities occur when an application includes user input in a page sent to the browser without properly validating or escaping that content. In this case, the vulnerability is in the JavaScript code where the user input `username` is directly used in a SQL query string without any sanitization or validation.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to:\n\n1. **Validate Input**: User input should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain.\n\n2. **Encode Data**: User-controllable data should be HTML entity encoded before being written to the page to prevent the browser from interpreting it as active content.\n\n3. **Use Parameterized Queries**: To prevent SQL Injection attacks, use parameterized queries or prepared statements instead of building SQL queries manually with string concatenation.\n\n## Source Code Fix Recommendation\n\nThe following code snippet demonstrates how to fix the vulnerability using parameterized queries:\n\n```javascript\nvar sql = require('sql-template-strings');\nvar query = sql`SELECT * FROM purchases WHERE user_name = ${username}`;\n```\n\n## Library Dependencies\n\nThe code example requires the `sql-template-strings` library to execute properly.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)\n- [CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')](https://cwe.mitre.org/data/definitions/89.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.raw-html-concat"
                ]
              }
            },
            {
              "id": "glog-68b437ee-adf8-4229-98aa-f3eddf380627",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nEJS (Embedded JavaScript) templates are a popular templating engine in JavaScript. The vulnerability arises when the `<%- %>` syntax is used in EJS templates, which does not escape HTML entities, thus allowing potential Cross-Site Scripting (XSS) attacks.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always use the `<%= %>` syntax in EJS templates, which escapes HTML entities and prevents XSS attacks. Never insert untrusted data except in allowed locations and HTML escape variables using appropriate methods.\n\n## Source Code Fix Recommendation\n\nReplace `<%- products[i].product_id %>` with `<%= products[i].product_id %>`. \n\nThe fixed code should look like this:\n\n```javascript\n<td><%= products[i].product_id %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-dead25c0-a07e-4273-bc57-1d9fff810e71",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, manipulate web content, or perform actions on behalf of the user without their consent.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%- %>` syntax in EJS, which automatically escapes HTML characters. Never use the `<%= %>` syntax with untrusted data, as this does not escape HTML characters and can lead to XSS attacks.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of your code:\n\n```javascript\n<td><%- products[i].product_name %></td>\n```\n\nIn this code, the `<%- %>` syntax is used to automatically escape HTML characters in `products[i].product_name`. This prevents any potential XSS attacks.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS\n\n## OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-e4ed36a3-366f-4769-9014-8a4d1b1a6218",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe vulnerability \"Potential Man-in-the-Middle Attack Vulnerability due to ADD Command in URL File Inclusion, Prefer COPY Command\" refers to a potential security issue in Dockerfile scripts. It is not specific to JavaScript but can affect any application that uses Docker for deployment.\n\nThe ADD command in Docker can download files from remote URLs and add them to the Docker image. If an attacker can intercept the network traffic (Man-in-the-Middle attack), they can replace the file being downloaded with a malicious one, leading to the inclusion of malicious code in the Docker image.\n\nThe specific vulnerability sink in this case is:\n\n```Dockerfile\nADD init.sql /docker-entrypoint-initdb.d/\n```\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use the COPY command instead of ADD for copying local files. The COPY command does not support downloading files from remote URLs, which eliminates the risk of a Man-in-the-Middle attack.\n\nIf you need to download files from a remote URL, it is recommended to do so using a secure method outside of the Dockerfile script, verify the integrity of the downloaded files (e.g., by checking a cryptographic hash), and then use the COPY command to include them in the Docker image.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```Dockerfile\nCOPY init.sql /docker-entrypoint-initdb.d/\n```\n\nIn this case, the `init.sql` file should be available in the local file system, in the same directory as the Dockerfile or in a subdirectory.\n\n## Library Dependencies\n\nThis code does not require any specific library dependencies, as it is a Dockerfile command.\n\n## References\n\n- [OWASP Docker Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html)\n- [CWE-494: Download of Code Without Integrity Check](https://cwe.mitre.org/data/definitions/494.html)"
              },
              "properties": {
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "glog-b553fd25-6a9f-484b-a0a3-7db3b1fc5409",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application uses untrusted data in the EJS template without proper validation or escaping, allowing an attacker to inject malicious scripts. This can lead to Cross-Site Scripting (XSS) attacks, where the attacker can execute arbitrary JavaScript code in the victim's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data and never insert untrusted data directly into the HTML document. This can be done by using the `<%- %>` syntax in EJS, which escapes HTML characters.\n\n## Source Code Fix Recommendation\n\nThe provided code snippet is already using the `<%- %>` syntax, which means it is correctly escaping the data. If it was not, the fix would be to replace `<%= %>` with `<%- %>`. \n\n```javascript\n<td><%- products[i].phone %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-9a619fc5-feed-4013-986f-4dc2331338b4",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\nIn the provided code snippet, the vulnerability arises from the use of `<%- products[i].mail %>` which does not escape the output. If `products[i].mail` contains any malicious script, it will be executed in the user's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%= %>` syntax in EJS, which automatically escapes the output.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code snippet:\n\n```javascript\n<td><%= products[i].mail %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-6acbd899-0722-4dd6-a5db-b84d7c27726c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the vulnerability arises from the use of `<%- products[i].address %>` which does not escape the output. This means that if `products[i].address` contains any malicious scripts, they will be executed in the user's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. In EJS, use `<%= products[i].address %>` instead of `<%- products[i].address %>`. The `<%=` tag automatically escapes the output, preventing any scripts from being executed.\n\n## Source Code Fix Recommendation\n\nReplace:\n\n```javascript\n<td><%- products[i].address %></td>\n```\n\nwith:\n\n```javascript\n<td><%= products[i].address %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## References\n\n- [OWASP Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-7416eeea-6c8f-4073-8a02-f6193c1eb875",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the application is vulnerable to Cross-Site Scripting (XSS) attacks because it includes unescaped data (`products[i].ship_date`) in the output.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. \n\n## Source Code Fix Recommendation\n\nYou can fix the vulnerability in the provided code snippet by using the `escape` function provided by EJS to escape the output:\n\n```javascript\n<td><%= ejs.escape(products[i].ship_date) %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-290735f6-b4e1-4e35-b3c2-75d14e9e41e4",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application using the EJS templating engine in JavaScript does not properly escape external data before including it in a web page. This can allow an attacker to inject malicious scripts into the page, which are then executed by the user's browser. This type of attack is known as Cross-Site Scripting (XSS).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape external data before including it in a web page. This can be done using the EJS escape function, which replaces potentially dangerous characters with their HTML-encoded equivalents.\n\n## Source Code Fix Recommendation\n\nInstead of using `<%-body%>`, which does not escape the data, use `<%=body%>`, which does. Here is the corrected code:\n\n```javascript\n<%=body%>\n```\n\n## Library Dependencies\n\nThe code example requires the `ejs` library to execute properly.\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-40c922d1-f148-4d17-ac4e-9a7dc97e75f6",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application using the EJS templating engine in JavaScript does not properly escape external data before including it in a web page. This can allow an attacker to inject malicious scripts into the page, which are then executed by the user's browser. This type of attack is known as Cross-Site Scripting (XSS).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape external data before including it in a web page. This can be done using the EJS escape function, which replaces potentially dangerous characters with their HTML-encoded equivalents.\n\n## Source Code Fix Recommendation\n\nInstead of using `<%-body%>`, which does not escape the data, use `<%=body%>`, which does. Here is the corrected code:\n\n```javascript\n<%=body%>\n```\n\n## Library Dependencies\n\nThe code example requires the `ejs` library to execute properly.\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-14224933-818d-4d84-a0a4-c509d1fe4b9b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\nIn the provided code snippet, the price of a product is being rendered without being properly escaped. This means that if the price contains any malicious scripts, they will be executed when the page is loaded.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always escape external data before using it in your templates. This can be done using the `escape` function provided by EJS, or by using a library that automatically escapes all data.\n\n## Source Code Fix Recommendation\n\nHere is how you can fix the provided code snippet:\n\n```javascript\n<td><%= ejs.escape(products[i].price) %></td>\n```\n\nIn this version of the code, the `escape` function is used to ensure that the price is properly escaped before it is rendered.\n\n## Library Dependencies\n\nThe provided code snippet requires the following library:\n\n- EJS: A templating engine for JavaScript.\n\n## OWASP Resources\n\n- [Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP Cheat Sheet Series - XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-241e5be7-368e-4e53-8e07-0ccec09556db",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe EJS (Embedded JavaScript) Template XSS (Cross-Site Scripting) Vulnerability Detected Due to Unescaped External Data is a security flaw that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the product price is being rendered without proper escaping, which could lead to a potential XSS attack if the product price contains malicious scripts.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape dynamic content that is being rendered on the page. This can be done using the `escape` function provided by EJS. \n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the code:\n\n```html\n<h4 class=\"pull-right\"><%= ejs.escape(product.price) %> ?</h4>\n```\n\nIn this version, the `escape` function is used to ensure that the product price is properly escaped before being rendered on the page.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP and CWE Links\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-675318e6-79f1-4f6b-ba14-7fdf482c0281",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. In the provided code snippet, the vulnerability lies in the image source attribute, where the product image is being rendered without escaping.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it's recommended to always escape external data before using it in your templates. This can prevent potential XSS attacks by ensuring that any injected scripts are treated as plain text rather than executable code.\n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, you can fix the vulnerability by using the `<%= %>` syntax instead of `<%- %>`. The `<%= %>` syntax automatically escapes the output:\n\n```javascript\n<img class=\"img-responsive\" src=\"<%= product.image %>\" alt=\"\">\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- Express.js: A web application framework for Node.js.\n- EJS: A simple templating language that lets you generate HTML markup with plain JavaScript.\n\n## OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-5a4fd634-f96e-4985-a8ff-def9716e3b57",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe EJS Template XSS Vulnerability Detected Due to Unescaped External Data is a security vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted HTTP request data based on the context in the HTML output (HTML body, HTML attribute, JavaScript, CSS, or URL) will be consumed. When the data is HTML attribute, it should be attribute encoded before included in the HTML output.\n\n## Source Code Fix Recommendation\n\nThe source code fix for this specific vulnerability sink would be to use the `<%= %>` syntax instead of `<%- %>` to ensure that the output is escaped:\n\n```html\n<input type=\"hidden\" id=\"returnurl\" class=\"form-control\" name=\"returnurl\" value=\"<%= returnurl %>\">\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS (Embedded JavaScript templates)\n\n## References\n\n- [OWASP Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-debe8204-89d7-4412-85e6-57a7135783d3",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. \n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, the `auth_error` variable is not being escaped, which can lead to Cross-Site Scripting (XSS) attacks. To fix this, you should escape the `auth_error` variable using the `escape` function provided by the EJS library. Here is the fixed code:\n\n```javascript\n<span class=\"label label-danger\"><%= ejs.escape(auth_error) %></span>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP Resources\n\n- [OWASP Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://owasp.org/www-community/xss-filter-evasion-cheatsheet)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-b97ab0de-0f94-4163-8720-28cef3fe684f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-26ac79ee-6687-4331-b038-0c69269c268b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into webpages viewed by other users. In the provided code, the product name is not being escaped, which means if it contains any script, it will be executed.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%= %>` syntax in EJS, which automatically escapes the output.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code:\n\n```html\n<h4><a href=\"#\"><%= product.name %> </a></h4>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross Site Scripting Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-719b5674-9c1b-48fe-af70-73e33e7bd4e5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. \n\n## Source Code Fix Recommendation\n\nIn your specific case, you can use the `<%= %>` syntax to escape the output:\n\n```javascript\n<p><%= product.description %></p>\n```\n\nThis will ensure that any HTML special characters in `product.description` are properly escaped.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS (Embedded JavaScript templates)\n\n## OWASP Resources\n\n- [Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-379459e7-e369-4bf7-8093-80690b116d2b",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe EJS Template XSS Vulnerability is a type of Cross-Site Scripting (XSS) vulnerability that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. In this case, the vulnerability is due to unescaped external data in the EJS template.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted HTTP request data based on the context in the HTML output (HTML body, HTML attribute, JavaScript, CSS, or URL) that the data lands. \n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, the value of the `product_id` input field is not properly escaped. This can be fixed by using the `<%= %>` syntax instead of `<%- %>`, which will HTML-escape the output:\n\n```html\n<input type=\"hidden\" class=\"form-control\" name=\"product_id\" id=\"product_id\" value=\"<%= product.id %>\">\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS (Embedded JavaScript templates)\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-caed5b9b-c784-4743-8644-0afda96b3c05",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe EJS (Embedded JavaScript) Template XSS (Cross-Site Scripting) Vulnerability Detected Due to Unescaped External Data is a security flaw that occurs when an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. This allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n\nIn the provided code snippet, the value of the `product_name` input field is being set using the EJS template syntax `<%- product.name %>`. This syntax does not escape the output, which means if `product.name` contains any malicious scripts, they will be executed when the page is rendered in the browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape untrusted data based on the HTML context (body, attribute, JavaScript, CSS, or URL) that the data will be placed into. In EJS, use `<%= product.name %>` instead of `<%- product.name %>`. The `<%=` syntax automatically escapes the output, preventing any scripts from being executed.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the code:\n\n```html\n<input type=\"hidden\" class=\"form-control\" name=\"product_name\" id=\"product_name\" value=\"<%= product.name %>\">\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-8f14ee6f-b6e9-4b15-a85f-8dc9f4474de5",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when an application uses untrusted data in the EJS template engine without proper validation or escaping. This allows an attacker to inject malicious scripts into the web page, which will be executed in the browser of any user viewing the page. This type of attack is known as Cross-Site Scripting (XSS).\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape untrusted data before including it in an HTML context. This can be done using the `<%- %>` syntax in EJS, which automatically escapes any HTML special characters.\n\n## Source Code Fix Recommendation\n\nThe provided code snippet is already using the `<%- %>` syntax, which means it is correctly escaping the `product.description` data. If the data was not being escaped, the code would look like this:\n\n```ejs\n<p><%= product.description %></p>\n```\n\nIn this case, the fix would be to replace `<%=` with `<%-`:\n\n```ejs\n<p><%- product.description %></p>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `ejs`: The EJS template engine.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-bcdfbefe-57a7-44be-a9a1-d3dbed00ba5e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" vulnerability in JavaScript refers to a situation where an application using EJS (Embedded JavaScript) templates does not properly escape external data before including it in a web page. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive data, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\nIn the provided code snippet, the vulnerability arises from the use of `<%-product.price%>` which does not escape the output. If `product.price` contains malicious scripts, they will be executed in the user's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before including it in a web page. In EJS, use `<%= %>` instead of `<%- %>`. The `<%= %>` syntax automatically escapes the output, preventing XSS attacks.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code snippet:\n\n```html\n<h4 class=\"pull-right\"><%=product.price%>?</h4>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## References\n\n- [OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-ab297f83-fcf7-47f0-898d-ee0ffd373102",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-e41ff26c-f70f-443f-a7ab-767e7dc88908",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" vulnerability in JavaScript refers to a situation where an application using EJS (Embedded JavaScript) templates does not properly escape external data before including it in the output. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive data, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to always escape external data before including it in the output. This can be done using the `<%- %>` syntax in EJS, which automatically escapes HTML characters. \n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, the `in_query` variable is already being escaped using the `<%- %>` syntax. Therefore, the code is not vulnerable to XSS attacks. If the `<%- %>` syntax was not used, the code would be vulnerable and the fix would be to replace `<%= in_query %>` with `<%- in_query %>`.\n\n```javascript\n<h2>Results for: <%- in_query %></h2>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-4c45dfdd-7c9f-4bfb-bbba-8283f992a7b1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-f79cb4d3-771a-411f-b87c-bfdff0355411",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, perform actions on behalf of the user, or exploit other vulnerabilities in the user's browser.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in an EJS template. This can be done using the `<%= %>` syntax, which automatically escapes HTML characters. Never use the `<%- %>` syntax with external data, as this does not escape HTML characters.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code:\n\n```javascript\n<td><%= products[i].description %></td>\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-0b88e109-7da0-466f-a3c1-688bffc29d25",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, manipulate web content, or perform actions on behalf of the user without their consent.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%- %>` syntax in EJS, which automatically escapes HTML characters. Never use the `<%= %>` syntax with untrusted data, as this does not escape HTML characters and can lead to XSS attacks.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of the provided code:\n\n```javascript\n<td><%- products[i].price %></td>\n```\n\nIn this code, the `<%- %>` syntax is used to automatically escape HTML characters in `products[i].price`. This prevents any potential XSS attacks.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies to execute properly:\n\n- EJS\n\n## OWASP Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n\n## Common Weakness Enumeration (CWE)\n\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            },
            {
              "id": "glog-3aff5b10-4d04-41f2-8f49-8b16e449435e",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"EJS Template XSS Vulnerability Detected Due to Unescaped External Data\" is a vulnerability that occurs when unescaped external data is used in an EJS template. This can lead to Cross-Site Scripting (XSS) attacks, where an attacker can inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive information, manipulate web content, or perform actions on behalf of the user without their consent.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, always escape external data before using it in your templates. This can be done using the `<%- %>` syntax in EJS, which escapes HTML entities in the output. Never trust user input or any data that comes from an external source.\n\n## Source Code Fix Recommendation\n\nHere is the fixed version of your code:\n\n```javascript\n<td><%= products[i].name %></td>\n```\n\nIn this version, the `<%= %>` syntax is used instead of `<%- %>`. This will escape any HTML entities in `products[i].name`, preventing XSS attacks.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- EJS\n\n## OWASP and CWE Resources\n\n- [OWASP Cross-Site Scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\n- [CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](https://cwe.mitre.org/data/definitions/79.html)"
              },
              "properties": {
                "tags": [
                  "javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-2164424f-45e5-47ea-8420-3aa6ad2d469f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "URI Contains Username and Password Vulnerability"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 60,
                  "snippet": {
                    "text": "        \"server\": \"postgres://postgres:postgres@127.0.0.1\","
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03721492aaf21c955a5f4b9e3d59fcc008c9c5fc423c42372e626f95a7d442853bbb47b5562f8fb99fe3c429f25890dd41eda72d8bf0186e49a04a6dc16ba2f7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-411b7f01-ebcd-4229-bd25-10f4508d78eb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "URI Contains Username and Password Detection"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 20,
                  "endLine": 12,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        \"server\": \"postgres://postgres:postgres@10.211.55.70\","
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "03721492aaf21c955a5f4b9e3d59fcc008c9c5fc423c42372e626f95a7d442853bbb47b5562f8fb99fe3c429f25890dd41eda72d8bf0186e49a04a6dc16ba2f7_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ce23c931-ce6f-4c93-8834-01ea757d9f3c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 25,
                  "endLine": 26,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ca517f37-3624-4330-bd06-ebcd79f5bf86",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-c8a312c9-7118-466f-bc37-df1da0a8fafa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 25,
                  "endLine": 20,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-7509b61e-7e8d-4602-beed-9830f416cb56",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential Root User Exploitation in Docker Container"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 23,
                  "snippet": {
                    "text": "CMD [ \"npm\", \"start\" ]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3794a54b1614a690ab3cd50a1d77f317271593f0eaa6490e873f3c5f2dacc69139826109e0a28aa0e17f29a4d3c1151b15a30b9bd7b0d3b3f9d9adb34e93b7f5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-3a20b902-aac0-4e59-92fb-df2d3b70f7a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 25,
                  "endLine": 56,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_4"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-c8070724-a714-40f4-912c-24fcd4afc026",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "endLine": 50,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_3"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-0fd572c5-7666-4fc2-8a23-ce72c8a462b9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Crypto.pseudoRandomBytes()/Math.random() exhibits cryptographic weakness.\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dummy.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 25,
                  "endLine": 62,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      \"price\": parseInt(Math.random() * 100),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06ee3d0b59f9f003577fa95e0fc956c21179c0e453058420cfeec7b76874b95622b4cbc5597f611f5940e817adaf63984f80bf81dc57e040d49da4467a9b84d0_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ba74872a-ce0c-4fee-a566-78cb2b064178",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Potential XSS Vulnerability from User-Controlled Data in HTML String"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 5,
                  "endLine": 21,
                  "endColumn": 112,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM products WHERE name ILIKE '%\" + query + \"%' OR description ILIKE '%\" + query + \"%';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8e1b2b0b1ca72259fb6c6dae927eaafdb67f3509f4f73d2fb4a7cdbc6d9807c653f5faebe6f764fbfc60917ad483d5a9fe365924ff226dbfff2241d691edbdd1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-f541fd6d-ce11-462a-9577-8e96e16de9aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/auth.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 100,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM users WHERE name = '\" + username + \"' AND password ='\" + password + \"';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2dd253326dd957d6848535d2487cbc38795602aa914421d96b711971a339f518d52d1240e60c35f823a4371fcc7e040aafca3ca54bcd010373abd82393cd796_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-314ac349-df3c-4a0f-93e3-8ce90f7e8917",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "XSS Vulnerability in User-Controlled HTML Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 38,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    var q = \"INSERT INTO purchases(mail, product_name, user_name, product_id, address, phone, ship_date, price) VALUES('\" +\n            cart.mail + \"', '\" +\n            cart.product_name + \"', '\" +\n            cart.username + \"', '\" +\n            cart.product_id + \"', '\" +\n            cart.address + \"', '\" +\n            cart.ship_date + \"', '\" +\n            cart.phone + \"', '\" +\n            cart.price +\n            \"');\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1ec23ecbf1dad849cae3cdd30cff8f34501b8c0252dfcefb4e8f2ba67bbf56a907767568e3e8f4c720740d9b1900b50736714114dc432a7595eaf925b3f78506_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-0fdb00f5-8e52-456e-92e4-4cdddf9e8223",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM products WHERE id = '\" + product_id + \"';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7ac7769f2d7bb5db6b2a472d69386375559b37d14c4857d4f0984cb3ea5d8864a8f6468bf4d638fdd92ce66319f2094c0014e386dd100200ba2c4335a7dd5e4a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-dc8d4109-6e4a-4b90-bef3-be06984146a4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Deprecation of MAINTAINER\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "services/postgresql/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 11,
                  "snippet": {
                    "text": "MAINTAINER \"Daniel Garcia aka (cr0hn)\" <cr0hn@cr0hn.com>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2d5f93d21f2431a74319428d0fe40554af955682fa9270ba8bd3540ca46f2ff1467d46f5e2c2da746f68bd7f18fc6b079a9ebf2bed3f435ffb2d4c847856cf7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-5de1a0e0-fbad-4966-8b0e-31cd9e7f7819",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential XSS Vulnerability from User-Controlled Data in HTML String\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "model/products.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 5,
                  "endLine": 46,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    var q = \"SELECT * FROM purchases WHERE user_name = '\" + username + \"';\";"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e0bcbe63c4516f6f7354959e9923c114686a9b8fec456c3fba3f70064dc2369f875a716ecc7c857b0c60fd7664fab2f06543a033d8c362a99cae1a7f86dcc5f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-68b437ee-adf8-4229-98aa-f3eddf380627",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 17,
                  "endLine": 26,
                  "endColumn": 46,
                  "snippet": {
                    "text": "            <td><%- products[i].product_id %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-dead25c0-a07e-4273-bc57-1d9fff810e71",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 17,
                  "endLine": 27,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            <td><%- products[i].product_name %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-e4ed36a3-366f-4769-9014-8a4d1b1a6218",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Potential Man-in-the-Middle Attack Vulnerability due to ADD Command in URL File Inclusion, Prefer COPY Command\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "services/postgresql/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD init.sql /docker-entrypoint-initdb.d/"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ba5554824e90804911f3261996b1051d7c4e4859ce6fb20f7ab745c8b883a6155aa7068c250eed6a9619b77908dfcd8ff0a1cf471c7f7ee4f91b5ce4f3081401_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b553fd25-6a9f-484b-a0a3-7db3b1fc5409",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 17,
                  "endLine": 29,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            <td><%- products[i].phone %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_3"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-9a619fc5-feed-4013-986f-4dc2331338b4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 17,
                  "endLine": 28,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            <td><%- products[i].mail %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-6acbd899-0722-4dd6-a5db-b84d7c27726c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 17,
                  "endLine": 31,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            <td><%- products[i].address %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-7416eeea-6c8f-4073-8a02-f6193c1eb875",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            <td><%- products[i].ship_date %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_4"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-290735f6-b4e1-4e35-b3c2-75d14e9e41e4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/content.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 5,
                  "endLine": 52,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    <%-body%>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0c90eeb28b4724626ef9d6ee9b3b911e41930fc4aa509f9874ba5adaf78224e880c48c8b74ebb0cda81b150c9eb16623c52b967ec4b19886800df8956699c5ce_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-40c922d1-f148-4d17-ac4e-9a7dc97e75f6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/layout.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "endLine": 37,
                  "endColumn": 10,
                  "snippet": {
                    "text": "<%-body%>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a95e1ffc66e76fa5739bc59d0482027cda57a46d0bf7bfee58d0f5d3d407a68805aa4f828240ec732e343c4bfea98de3ea74e76e35ceaf8846a2908d7d9d8bb0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-14224933-818d-4d84-a0a4-c509d1fe4b9b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/bought_products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            <td><%- products[i].price %>€</td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e338c2ba356ee0063b003df66ee63a654cd983e3ec6c855bf712f2497c6568848fdb4648046f01ee61a8a08a6b3faacc6d68cc3ba9a72b44665aea239803c31a_6"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-241e5be7-368e-4e53-8e07-0ccec09556db",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 40,
                  "endLine": 10,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                <h4 class=\"pull-right\"><%- product.price %> €</h4>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-675318e6-79f1-4f6b-ba14-7fdf482c0281",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 54,
                  "endLine": 8,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            <img class=\"img-responsive\" src=\"/images/<%- product.image %>\" alt=\"\">"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-5a4fd634-f96e-4985-a8ff-def9716e3b57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/login.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 94,
                  "endLine": 17,
                  "endColumn": 108,
                  "snippet": {
                    "text": "            <input type=\"hidden\" id=\"returnurl\" class=\"form-control\" name=\"returnurl\" value=\"<%-returnurl%>\">"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8a463c3857b4bdc05b0d99db46e8af7c72e9a78737f20ed803d7a051f8aa8bf15b5232341d3270689d25657d6b83d9fea7c11665f3c68df42e59c1771b9e1c5d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-debe8204-89d7-4412-85e6-57a7135783d3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/login.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 46,
                  "endLine": 22,
                  "endColumn": 61,
                  "snippet": {
                    "text": "            <span class=\"label label-danger\"><%-auth_error%></span>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8a463c3857b4bdc05b0d99db46e8af7c72e9a78737f20ed803d7a051f8aa8bf15b5232341d3270689d25657d6b83d9fea7c11665f3c68df42e59c1771b9e1c5d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-b97ab0de-0f94-4163-8720-28cef3fe684f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 100,
                  "endLine": 48,
                  "endColumn": 120,
                  "snippet": {
                    "text": "                            <input type=\"text\" class=\"form-control\" name=\"price\" id=\"price\" value=\"<%- product.price %>€\" readonly>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_4"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-26ac79ee-6687-4331-b038-0c69269c268b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 33,
                  "endLine": 11,
                  "endColumn": 50,
                  "snippet": {
                    "text": "                <h4><a href=\"#\"><%-product.name%> </a></h4>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-719b5674-9c1b-48fe-af70-73e33e7bd4e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 20,
                  "endLine": 12,
                  "endColumn": 44,
                  "snippet": {
                    "text": "                <p><%-product.description%> </p>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_3"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-379459e7-e369-4bf7-8093-80690b116d2b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 108,
                  "endLine": 50,
                  "endColumn": 125,
                  "snippet": {
                    "text": "                        <input type=\"hidden\" class=\"form-control\" name=\"product_id\" id=\"product_id\" value=\"<%- product.id %>\">"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-caed5b9b-c784-4743-8644-0afda96b3c05",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/product_detail.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 112,
                  "endLine": 51,
                  "endColumn": 131,
                  "snippet": {
                    "text": "                        <input type=\"hidden\" class=\"form-control\" name=\"product_name\" id=\"product_name\" value=\"<%- product.name %>\">"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83f5383cd452084c131827a5b0260fec3fcd593c5d5284a1f19da401ea83358ec8177c255e249974329bf422171b01e6b935d561c4ba98b2ee0c30c4757f72ec_6"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-8f14ee6f-b6e9-4b15-a85f-8dc9f4474de5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 24,
                  "endLine": 21,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                    <p><%-product.description%></p>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2bb0256fda4c099e77bc165691b41c4da899b61b491f058006790ad4379bff1c0076397debe01e55f5588c91af303127eb77ecebaeb442d97b2b95f30a0ff0e_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-bcdfbefe-57a7-44be-a9a1-d3dbed00ba5e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/products.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 44,
                  "endLine": 18,
                  "endColumn": 62,
                  "snippet": {
                    "text": "                    <h4 class=\"pull-right\"><%-product.price%>€</h4>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e2bb0256fda4c099e77bc165691b41c4da899b61b491f058006790ad4379bff1c0076397debe01e55f5588c91af303127eb77ecebaeb442d97b2b95f30a0ff0e_2"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-ab297f83-fcf7-47f0-898d-ee0ffd373102",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/search.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 17,
                  "endLine": 23,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            <td><%- i + 1 %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64ec4eea19ba00782cc0a0c4ccae03c5bcdbc10a96b0e8a7e1ae0206b65aa65d7d002a1e6345e82fdf2ca62066474c7b1bdf95265e4b8d7a81dd173fb69bd59b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-e41ff26c-f70f-443f-a7ab-767e7dc88908",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/search.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 18,
                  "endLine": 3,
                  "endColumn": 33,
                  "snippet": {
                    "text": "<h2>Results for: <%- in_query %></h2>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64ec4eea19ba00782cc0a0c4ccae03c5bcdbc10a96b0e8a7e1ae0206b65aa65d7d002a1e6345e82fdf2ca62066474c7b1bdf95265e4b8d7a81dd173fb69bd59b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-4c45dfdd-7c9f-4bfb-bbba-8283f992a7b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid input."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/search.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 46,
                  "endLine": 27,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            <td><a href=\"/products/detail?id=<%- i + 1 %>\"><i class=\"glyphicon glyphicon-list\"></i></a></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64ec4eea19ba00782cc0a0c4ccae03c5bcdbc10a96b0e8a7e1ae0206b65aa65d7d002a1e6345e82fdf2ca62066474c7b1bdf95265e4b8d7a81dd173fb69bd59b_5"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-f79cb4d3-771a-411f-b87c-bfdff0355411",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/search.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 17,
                  "endLine": 25,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            <td><%- products[i].description %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64ec4eea19ba00782cc0a0c4ccae03c5bcdbc10a96b0e8a7e1ae0206b65aa65d7d002a1e6345e82fdf2ca62066474c7b1bdf95265e4b8d7a81dd173fb69bd59b_3"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-0b88e109-7da0-466f-a3c1-688bffc29d25",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/search.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 17,
                  "endLine": 26,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            <td><%- products[i].price %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64ec4eea19ba00782cc0a0c4ccae03c5bcdbc10a96b0e8a7e1ae0206b65aa65d7d002a1e6345e82fdf2ca62066474c7b1bdf95265e4b8d7a81dd173fb69bd59b_4"
          },
          "properties": {}
        },
        {
          "ruleId": "glog-3aff5b10-4d04-41f2-8f49-8b16e449435e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "EJS Template XSS Vulnerability Detected Due to Unescaped External Data"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/search.ejs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 17,
                  "endLine": 24,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            <td><%- products[i].name %></td>"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "64ec4eea19ba00782cc0a0c4ccae03c5bcdbc10a96b0e8a7e1ae0206b65aa65d7d002a1e6345e82fdf2ca62066474c7b1bdf95265e4b8d7a81dd173fb69bd59b_2"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}